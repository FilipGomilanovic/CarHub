# Generated by Django 4.0.4 on 2022-05-21 17:11

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Model',
            fields=[
                ('idmodel', models.AutoField(db_column='idModel', primary_key=True, serialize=False)),
                ('carreviewlink', models.CharField(blank=True, db_column='CarReviewLink', max_length=500, null=True)),
                ('brend', models.CharField(db_column='Brend', max_length=100)),
                ('naziv_modela', models.CharField(db_column='Naziv modela', max_length=100)),
                ('godisteOd', models.IntegerField(db_column='GodisteOd', default=0)),
                ('godisteDo', models.IntegerField(db_column='GodisteDo', default=0)),
            ],
            options={
                'db_table': 'model',
            },
        ),
        migrations.CreateModel(
            name='Korisnik',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('kontakt_telefon', models.CharField(db_column='Kontakt telefon', max_length=45)),
                ('slika', models.CharField(blank=True, db_column='Slika', max_length=500, null=True)),
                ('uloga', models.CharField(db_column='Uloga', max_length=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'korisnik',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Oglas',
            fields=[
                ('idoglas', models.AutoField(db_column='idOglas', primary_key=True, serialize=False)),
                ('tip', models.CharField(db_column='Tip', max_length=1)),
                ('cena', models.IntegerField(blank=True, db_column='Cena', null=True)),
                ('boost', models.IntegerField(blank=True, db_column='Boost', null=True)),
                ('grad', models.CharField(db_column='Grad', max_length=45)),
                ('slike', models.FileField(db_column='Slike', null=True, upload_to='imgs/')),
                ('snaga', models.IntegerField(db_column='Snaga', default=0)),
                ('kilometraza', models.IntegerField(db_column='Kilometraza', default=0)),
                ('godiste', models.IntegerField(db_column='Godiste', default=0)),
                ('karoserija', models.CharField(blank=True, db_column='Karoserija', default='limuzina', max_length=20)),
                ('model_idmodel', models.ForeignKey(db_column='Model_idModel', on_delete=django.db.models.deletion.CASCADE, to='CarHub.model')),
            ],
            options={
                'db_table': 'oglas',
            },
        ),
    ]
